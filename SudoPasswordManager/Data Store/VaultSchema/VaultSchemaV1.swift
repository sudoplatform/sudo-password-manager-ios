//
// Copyright Â© 2020 Anonyome Labs, Inc. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

import Foundation

/// Namespace the vault schema to avoid duplicate interface names.
extension VaultSchema {

    /// V1 of the json vault schema. Autogenerated from vault schema using quicktype.
    ///
    /// Minor changes (e.g. renaming) have been made.
    enum VaultSchemaV1 {

        // MARK: - Vault
        struct Vault: Codable {
            var bankAccount: [BankAccount]
            var creditCard: [CreditCard]
            var generatedPassword: [GeneratedPassword]
            var login: [Login]
            var schemaVersion: Double

            init(from decoder: Swift.Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.bankAccount = try container.decodeIfPresent([BankAccount].self, forKey: CodingKeys.bankAccount) ?? []
                self.creditCard = try container.decodeIfPresent([CreditCard].self, forKey: CodingKeys.creditCard) ?? []
                self.generatedPassword = try container.decodeIfPresent([GeneratedPassword].self, forKey: CodingKeys.generatedPassword) ?? []
                self.login = try container.decodeIfPresent([Login].self, forKey: CodingKeys.login) ?? []
                self.schemaVersion = try container.decode(Double.self, forKey: CodingKeys.schemaVersion)
            }

            init(bankAccount: [BankAccount],
                 creditCard: [CreditCard],
                 generatedPassword: [GeneratedPassword],
                 login: [Login],
                 schemaVersion: Double) {
                self.bankAccount = bankAccount
                self.creditCard = creditCard
                self.generatedPassword = generatedPassword
                self.login = login
                self.schemaVersion = schemaVersion
            }
        }

        // MARK: - BankAccount
        struct BankAccount: Codable {
            var createdAt: Date
            var id, name: String
            var notes: SecureField?
            var updatedAt: Date
            var type: BankAccountType
            var accountNumber, accountPin: SecureField?
            var accountType, bankName, branchAddress, branchPhone: String?
            var ibanNumber, routingNumber, swiftCode: String?
        }

        // MARK: - SecureField
        struct SecureField: Codable {
            var secureValue: String
        }

        enum BankAccountType: String, Codable {
            case bankAccount = "bankAccount"
        }

        // MARK: - CreditCard
        struct CreditCard: Codable {
            var createdAt: Date
            var id, name: String
            var notes: SecureField?
            var updatedAt: Date
            var type: CreditCardType
            var cardExpiration: Date?
            var cardName: String?
            var cardNumber, cardSecurityCode: SecureField?
            var cardType: String?
        }

        enum CreditCardType: String, Codable {
            case creditCard = "creditCard"
        }

        // MARK: - GeneratedPassword
        struct GeneratedPassword: Codable {
            var createdAt: Date
            var id, name: String
            var notes: SecureField?
            var updatedAt: Date
            var type: GeneratedPasswordType
            var password: PasswordField
            var url: String?
        }

        // MARK: - PasswordField
        struct PasswordField: Codable {
            var secureValue: String
            var createdAt: Date
            var replacedAt: Date?
        }

        enum GeneratedPasswordType: String, Codable {
            case generatedPassword = "generatedPassword"
        }

        // MARK: - Login
        struct Login: Codable {
            var createdAt: Date
            var id, name: String
            var notes: SecureField?
            var updatedAt: Date
            var type: LoginType
            var password: PasswordField?
            var url, user: String?
        }

        enum LoginType: String, Codable {
            case login = "login"
        }
    }
}

/// Functions for converting to from `Data` type expected by the secure vault service.
extension VaultSchema.VaultSchemaV1 {

    static var dateFormatter: ISO8601DateFormatter {
        let formatter = ISO8601DateFormatter()
        formatter.formatOptions = [.withFractionalSeconds, .withInternetDateTime]
        return formatter
    }

    /// These are just passthroughs to JSONEncoder/decoder, but we could use this space
    /// to perform custom json parsing if required, or to tweak the encoder/decoder (e.g. date format).
    class Encoder {

        lazy var encoder: JSONEncoder = {
            let e = JSONEncoder()
            e.dateEncodingStrategy = .custom({ (date, e) in
                let dateString = dateFormatter.string(from: date)
                var container = e.singleValueContainer()
                try container.encode(dateString)
            })
            return e
        }()

        func encode(vault: Vault) throws -> Data {
            return try encoder.encode(vault)
        }
    }

    class Decoder {

        lazy var decoder: JSONDecoder = {
            let d = JSONDecoder()
            d.dateDecodingStrategy = .custom({ (d) -> Date in
                let dateString: String = try d.singleValueContainer().decode(String.self)
                guard let date = dateFormatter.date(from: dateString) else {
                    throw VaultFormatError.invalidDate
                }
                return date
            })
            return d
        }()

        func decode(data: Data) throws -> Vault {
            return try decoder.decode(Vault.self, from: data)
        }
    }
}


enum VaultFormatError: Error {
    case invalidDate
}



